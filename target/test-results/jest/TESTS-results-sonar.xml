<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
  <file path="/Users/sktifa/workspace/simple-sample/src/test/javascript/spec/app/admin/health/health.service.spec.ts">
    <testCase name="Health Service transformHealthData should flatten empty health data" duration="7"/>
    <testCase name="Health Service transformHealthData should flatten health data with no subsystems" duration="2"/>
    <testCase name="Health Service transformHealthData should flatten health data with subsystems at level 1, main system has no additional information" duration="1"/>
    <testCase name="Health Service transformHealthData should flatten health data with subsystems at level 1, main system has additional information" duration="1"/>
    <testCase name="Health Service transformHealthData should flatten health data with subsystems at level 1, main system has additional error" duration="1"/>
  </file>
  <file path="/Users/sktifa/workspace/simple-sample/src/test/javascript/spec/app/admin/user-management/user-management.component.spec.ts">
    <testCase name="UserManagement Component should be a Vue instance" duration="36"/>
    <testCase name="UserManagement Component OnInit Should call load all on init" duration="12"/>
    <testCase name="UserManagement Component setActive Should update user and call load all" duration="20"/>
    <testCase name="UserManagement Component confirmDelete Should call delete service on confirmDelete" duration="10"/>
    <testCase name="UserManagement Component change order should change order and invert reverse" duration="9"/>
  </file>
  <file path="/Users/sktifa/workspace/simple-sample/src/test/javascript/spec/app/account/register/register.component.spec.ts">
    <testCase name="Register Component should be a Vue instance" duration="36"/>
    <testCase name="Register Component should set all default values correctly" duration="13"/>
    <testCase name="Register Component should open login modal when asked to" duration="13"/>
    <testCase name="Register Component should set error when passwords do no match" duration="25"/>
    <testCase name="Register Component should register when password match" duration="25"/>
    <testCase name="Register Component should register when password match but throw error when login already exist" duration="19"/>
    <testCase name="Register Component should register when password match but throw error when email already used" duration="16"/>
    <testCase name="Register Component should register when password match but throw error" duration="29"/>
  </file>
  <file path="/Users/sktifa/workspace/simple-sample/src/test/javascript/spec/app/admin/audits/audits.component.spec.ts">
    <testCase name="Audits Component should be a Vue instance" duration="20"/>
    <testCase name="Audits Component today function  should set toDate to current date" duration="6"/>
    <testCase name="Audits Component previousMonth function  should set fromDate to current date" duration="6"/>
    <testCase name="Audits Component By default, on init should set all default values correctly" duration="7"/>
    <testCase name="Audits Component OnInit Should call load all on init" duration="10"/>
  </file>
  <file path="/Users/sktifa/workspace/simple-sample/src/test/javascript/spec/app/account/settings/settings.component.spec.ts">
    <testCase name="Settings Component should be a Vue instance" duration="17"/>
    <testCase name="Settings Component should send the current identity upon save" duration="17"/>
    <testCase name="Settings Component should notify of success upon successful save" duration="12"/>
    <testCase name="Settings Component should notify of error upon failed save" duration="10"/>
    <testCase name="Settings Component should notify of error upon error 400" duration="9"/>
    <testCase name="Settings Component should notify of error upon email already used" duration="14"/>
  </file>
  <file path="/Users/sktifa/workspace/simple-sample/src/test/javascript/spec/app/admin/health/health.component.spec.ts">
    <testCase name="Health Component should be a Vue instance" duration="19"/>
    <testCase name="Health Component baseName and subSystemName should return the basename when it has no sub system" duration="6"/>
    <testCase name="Health Component baseName and subSystemName should return the basename when it has sub systems" duration="5"/>
    <testCase name="Health Component baseName and subSystemName should return the sub system name" duration="4"/>
    <testCase name="Health Component baseName and subSystemName should return the subsystem when it has multiple keys" duration="5"/>
    <testCase name="Health Component getBadgeClass should get badge class" duration="5"/>
    <testCase name="Health Component refresh should call refresh on init" duration="6"/>
    <testCase name="Health Component refresh should handle a 503 on refreshing health data" duration="11"/>
  </file>
  <file path="/Users/sktifa/workspace/simple-sample/src/test/javascript/spec/app/admin/user-management/user-management-edit.component.spec.ts">
    <testCase name="UserManagementEdit Component should be a Vue instance" duration="27"/>
    <testCase name="UserManagementEdit Component init Should load user" duration="18"/>
    <testCase name="UserManagementEdit Component initAuthorities Should load authorities" duration="15"/>
    <testCase name="UserManagementEdit Component save Should call update service on save for existing user" duration="15"/>
    <testCase name="UserManagementEdit Component save Should call create service on save for new user" duration="19"/>
  </file>
  <file path="/Users/sktifa/workspace/simple-sample/src/test/javascript/spec/app/account/change-password/change-password.component.spec.ts">
    <testCase name="ChangePassword Component should be a Vue instance" duration="15"/>
    <testCase name="ChangePassword Component should show error if passwords do not match" duration="12"/>
    <testCase name="ChangePassword Component should call Auth.changePassword when passwords match and  set success to OK upon success" duration="13"/>
    <testCase name="ChangePassword Component should notify of error if change password fails" duration="12"/>
  </file>
  <file path="/Users/sktifa/workspace/simple-sample/src/test/javascript/spec/app/account/login-form/login-form.component.spec.ts">
    <testCase name="LoginForm Component should be a Vue instance" duration="9"/>
    <testCase name="LoginForm Component should not store token if authentication is KO" duration="11"/>
    <testCase name="LoginForm Component should store token if authentication is OK" duration="95"/>
  </file>
  <file path="/Users/sktifa/workspace/simple-sample/src/test/javascript/spec/app/admin/metrics/metrics.component.spec.ts">
    <testCase name="Metrics Component should be a Vue instance" duration="19"/>
    <testCase name="Metrics Component refresh should call refresh on init" duration="22"/>
    <testCase name="Metrics Component isNan should return if a variable is NaN" duration="11"/>
    <testCase name="Metrics Component Thread dump method should return Thread Dump" duration="17"/>
  </file>
  <file path="/Users/sktifa/workspace/simple-sample/src/test/javascript/spec/app/admin/metrics/metrics-modal.component.spec.ts">
    <testCase name="Metrics Component should be a Vue instance" duration="7"/>
    <testCase name="Metrics Component init should count the numbers of each thread type" duration="33"/>
    <testCase name="Metrics Component getBadgeClass should return badge-success for RUNNABLE" duration="5"/>
    <testCase name="Metrics Component getBadgeClass should return badge-info for WAITING" duration="3"/>
    <testCase name="Metrics Component getBadgeClass should return badge-warning for TIMED_WAITING" duration="3"/>
    <testCase name="Metrics Component getBadgeClass should return badge-danger for BLOCKED" duration="3"/>
    <testCase name="Metrics Component getBadgeClass should return undefined for anything else" duration="2"/>
  </file>
  <file path="/Users/sktifa/workspace/simple-sample/src/test/javascript/spec/app/account/reset-password/reset-password.component.spec.ts">
    <testCase name="Reset Component should be a Vue instance" duration="12"/>
    <testCase name="Reset Component should reset request be a success" duration="6"/>
    <testCase name="Reset Component should reset request fail as an error" duration="7"/>
    <testCase name="Reset Component should reset request fail as an email not existing error" duration="8"/>
  </file>
  <file path="/Users/sktifa/workspace/simple-sample/src/test/javascript/spec/app/admin/configuration/configuration.component.spec.ts">
    <testCase name="Configuration Component should be a Vue instance" duration="6"/>
    <testCase name="Configuration Component OnRouteEnter should set all default values correctly" duration="5"/>
    <testCase name="Configuration Component OnRouteEnter Should call load all on init" duration="4"/>
    <testCase name="Configuration Component keys method should return the keys of an Object" duration="4"/>
  </file>
  <file path="/Users/sktifa/workspace/simple-sample/src/test/javascript/spec/app/admin/user-management/user-management-view.component.spec.ts">
    <testCase name="UserManagementView Component should be a Vue instance" duration="3"/>
    <testCase name="UserManagementView Component OnInit Should call load all on init" duration="10"/>
  </file>
  <file path="/Users/sktifa/workspace/simple-sample/src/test/javascript/spec/app/admin/logs/logs.component.spec.ts">
    <testCase name="Logs Component should be a Vue instance" duration="6"/>
    <testCase name="Logs Component OnInit should set all default values correctly" duration="4"/>
    <testCase name="Logs Component OnInit Should call load all on init" duration="3"/>
    <testCase name="Logs Component change log level should change log level correctly" duration="4"/>
    <testCase name="Logs Component change order should change order and invert reverse" duration="2"/>
  </file>
  <file path="/Users/sktifa/workspace/simple-sample/src/test/javascript/spec/app/account/activate/activate.component.spec.ts">
    <testCase name="Activate Component should be a Vue instance" duration="3"/>
    <testCase name="Activate Component should display error when activation fails" duration="3"/>
    <testCase name="Activate Component should display success when activation succeeds" duration="3"/>
  </file>
  <file path="/Users/sktifa/workspace/simple-sample/src/test/javascript/spec/app/core/ribbon/ribbon.component.spec.ts">
    <testCase name="Ribbon should be a Vue instance" duration="3"/>
    <testCase name="Ribbon should not have ribbonEnv when no data" duration="2"/>
    <testCase name="Ribbon should not have ribbonEnv when no activeProfiles" duration="2"/>
    <testCase name="Ribbon should not have ribbonEnv when empty activeProfiles" duration="1"/>
    <testCase name="Ribbon should not have ribbonEnv when empty activeProfiles" duration="3"/>
  </file>
  <file path="/Users/sktifa/workspace/simple-sample/src/test/javascript/spec/app/core/jhi-footer/jhi-footer.component.spec.ts">
    <testCase name="JhiFooter should be a Vue instance" duration="3"/>
  </file>
  <file path="/Users/sktifa/workspace/simple-sample/src/test/javascript/spec/app/admin/docs/docs.component.spec.ts">
    <testCase name="JhiDocs should be a Vue instance" duration="4"/>
  </file>
</testExecutions>